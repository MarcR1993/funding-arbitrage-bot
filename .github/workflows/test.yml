name: 🧪 Bot Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Permet de lancer manuellement

jobs:
  test-bot:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: 🧪 Run main test script
      run: |
        python test_bot.py
    
    - name: ✅ Test imports
      run: |
        python -c "from src.main import main; print('✅ Main import OK')"
        python -c "from src.models.config import FundingBotConfig; print('✅ Config OK')"
        python -c "from src.bot.arbitrage_engine import ArbitrageEngine; print('✅ Engine OK')"
        python -c "from src.ui.cli_interface import FundingBotCLI; print('✅ CLI OK')"
    
    - name: 🔧 Test configuration
      run: |
        python src/main.py --version
        python src/main.py --validate-config --config config/config.example.yaml
    
    - name: 🎯 Test help command
      run: |
        python src/main.py --help
    
    - name: 📊 Test models
      run: |
        python -c "
        from src.models.position import Position
        from src.models.opportunity import create_opportunity
        
        # Test Position
        pos = Position(pair_name='test', token='BTC', exchange_a='binance', exchange_b='kucoin', size_usd=1000)
        print(f'✅ Position: {pos.id} - {pos.token}')
        
        # Test Opportunity
        opp = create_opportunity('BTC', 
            {'exchange_name': 'binance', 'funding_rate': 0.001, 'funding_frequency_hours': 8},
            {'exchange_name': 'kucoin', 'funding_rate': -0.0005, 'funding_frequency_hours': 8}
        )
        print(f'✅ Opportunity: {opp.spread:.4f} spread')
        "
    
    - name: 🤖 Test engine (no connections)
      run: |
        python -c "
        from src.bot.arbitrage_engine import ArbitrageEngine, EngineState
        from src.models.config import FundingBotConfig
        
        config = FundingBotConfig()
        # Disable exchanges for test
        config.exchanges.binance.enabled = False
        config.exchanges.kucoin.enabled = False
        config.exchanges.hyperliquid.enabled = False
        
        engine = ArbitrageEngine(config)
        print(f'✅ Engine state: {engine.state.value}')
        
        status = engine.get_engine_status()
        print(f'✅ Engine status: OK')
        "
    
    - name: 📁 Check file structure
      run: |
        echo "📁 Checking critical files..."
        
        files=(
          "src/__init__.py"
          "src/main.py"
          "src/models/__init__.py"
          "src/models/position.py"
          "src/models/opportunity.py"
          "src/models/config.py"
          "src/models/exchange.py"
          "src/exchanges/__init__.py"
          "src/exchanges/base_connector.py"
          "src/exchanges/binance_connector.py"
          "src/exchanges/kucoin_connector.py"
          "src/exchanges/hyperliquid_connector.py"
          "src/bot/__init__.py"
          "src/bot/funding_oracle.py"
          "src/bot/position_manager.py"
          "src/bot/arbitrage_engine.py"
          "src/ui/__init__.py"
          "src/ui/cli_interface.py"
          "requirements.txt"
          "requirements-dev.txt"
          "pyproject.toml"
          ".env.example"
          "README.md"
        )
        
        missing=0
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file"
          else
            echo "❌ $file - MISSING"
            missing=$((missing + 1))
          fi
        done
        
        if [ $missing -eq 0 ]; then
          echo "🎉 All files present!"
        else
          echo "⚠️ $missing files missing"
          exit 1
        fi
    
    - name: 🏗️ Test project structure
      run: |
        echo "📊 Project structure:"
        find src -name "*.py" | head -20
        
        echo ""
        echo "📦 Dependencies check:"
        python -c "
        critical_deps = ['ccxt', 'pydantic', 'rich', 'questionary', 'aiohttp']
        missing = []
        for dep in critical_deps:
            try:
                __import__(dep)
                print(f'✅ {dep}')
            except ImportError:
                print(f'❌ {dep}')
                missing.append(dep)
        
        if not missing:
            print('🎉 All dependencies OK!')
        else:
            print(f'⚠️ Missing: {missing}')
            exit(1)
        "
    
    - name: 🎉 Success summary
      run: |
        echo "🎉 ALL TESTS PASSED!"
        echo "✅ Bot structure is complete"
        echo "✅ All imports working"
        echo "✅ Models functional"
        echo "✅ Engine initializes"
        echo "✅ CLI interface ready"
        echo ""
        echo "🚀 Ready for configuration and use!"

  lint-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 📦 Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: 🎨 Check code formatting
      run: |
        echo "Checking code style..."
        black --check --diff src/ || echo "⚠️ Code needs formatting"
        isort --check-only --diff src/ || echo "⚠️ Imports need sorting"
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Critical issues found"
        echo "✅ Linting complete"
